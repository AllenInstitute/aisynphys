import os, glob
from .. import database as db
from .module import AnalysisModule
from .. import config
from acq4.util.DataManager import getDirHandle


class SliceAnalysisModule(AnalysisModule):
    """Imports per-slice metadata into DB.
    """
    name = 'slice'
    dependencies = []
    
    @classmethod
    def process_job(cls, job_id, invalid):


        
    @classmethod
    def finished_jobs(cls):
        """Return an ordered dict of job IDs that have been processed by this module and
        the dates when they were processed.

        Note that some results returned may be obsolete if dependencies have changed.
        """
        slices = db.query(db.Slice.acq_timestamp).all()

    @classmethod
    def drop_jobs(cls, job_ids):
        """Remove all results previously stored for a list of job IDs.
        """
        raise NotImplementedError()

    @classmethod
    def drop_all(cls):
        """Remove all results generated by this module.
        """
        raise NotImplementedError()
        
    @classmethod
    def ready_jobs(self):


_all_slices = None
def all_slices():
    """Return a dict mapping {slice_timestamp: path} for all known slices.
    
    This is only generated once per running process; set _all_slices = None
    to force the list to be regenerated.
    """
    global _all_slices
    if _all_slices is not None:
        return _all_slices
    
    slice_dirs = sorted(glob.glob(os.path.join(config.synphys_data, '*', 'slice_*')))
    _all_slices = OrderedDict()
    for path in slice_dirs:
        dh = getDirHandle(path)
        ts = dh.info()['__timestamp__']
        _all_slices[ts] = path
        
    return _all_slices
